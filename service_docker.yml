## Adapted from:
## https://docs.docker.com/engine/install/ubuntu/

- hosts: localhost
  gather_facts: yes

  vars:
    - my_name: "service_docker"
    - my_deb_prereq:
      - gpg
      - aria2
      - ca-certificates
    - my_deb_remove:
      - docker.io
      - docker-doc
      - docker-compose
      - docker-compose-v2
      - podman-docker
      - containerd
      - runc
    - my_deb_docker:
      - docker-ce
      - docker-ce-cli
      - containerd.io
      - docker-buildx-plugin
      - docker-compose-plugin

  tasks:

  - name: "{{ my_name }} install prereqs"
    ansible.builtin.package:
       name: "{{ my_deb_prereq }}"
       state: latest
    when: ansible_distribution == "Ubuntu" or
          ansible_distribution == "Debian"

  - name: "{{ my_name }} remove conflicting packages"
    ansible.builtin.apt:
       name: "{{ my_deb_remove }}"
       state: absent
       purge: true
    when: ansible_distribution == "Ubuntu" or
          ansible_distribution == "Debian"

  #- name: "{{ my_name }} download GPG key"
  #  ansible.builtin.get_url:
  #    url: https://download.docker.com/linux/ubuntu/gpg
  #    dest: /etc/apt/keyrings/docker.asc
  #  when: ansible_distribution == "Ubuntu" or
  #        ansible_distribution == "Debian"

  #- name: "{{ my_name }} apt sources list"
  #  ansible.builtin.copy:
  #    dest: /etc/apt/sources.list.d/docker.list
  #    content: "deb [arch=amd64 signed-by=/etc/apt/keyrings/docker.asc] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
  #  when: ansible_distribution == "Ubuntu"

  - name: "{{ my_name }} install packages"
    ansible.builtin.apt:
      name: "{{ my_deb_docker }}"
      state: latest
      update_cache: true
    notify: "{{ my_name }} restart service"
    when: ansible_distribution == "Ubuntu" or
          ansible_distribution == "Debian"

  - name: "{{ my_name }} enable service"
    ansible.builtin.service:
      name: docker
      enabled: true
      state: started


  handlers:

  - name: "{{ my_name }} update apt"
    ansible.builtin.apt:
      update_cache: true
    when: ansible_distribution == "Ubuntu" or
          ansible_distribution == "Debian"

  - name: "{{ my_name }} restart service"
    ansible.builtin.service:
      name: docker
      state: restarted
